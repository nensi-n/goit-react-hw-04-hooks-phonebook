{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Container/Container.jsx","components/Filter/Filter.jsx","App.js","utils/filter.js","index.js"],"names":["ContactForm","onSubmite","useState","name","number","state","setState","handleChange","e","target","value","prev","id","onSubmit","preventDefault","className","type","pattern","title","required","onChange","ContactList","contacts","onDelete","map","contact","onClick","Container","children","Filter","App","filter","useEffect","localStorage","getItem","parsedContacts","JSON","parse","prevState","some","alert","newContact","shortid","generate","setItem","stringify","addContact","newContacts","toLowerCase","includes","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25871342.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"../ContactForm/ContactForm.css\";\r\n\r\nfunction ContactForm({ onSubmite }) {\r\n  const [state, setState] = useState({ name: \"\", number: \"\" });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmite = (e) => {\r\n    e.preventDefault();\r\n    onSubmite(state);\r\n    setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  return (\r\n    <form id=\"contact\" onSubmit={handleSubmite}>\r\n      <label>\r\n        <p>Name:</p>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={state.name}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        <p>Number:</p>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={state.number}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className=\"submit-button\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import T from \"prop-types\";\r\nimport \"../ContactList/ContactList.css\";\r\n\r\nfunction ContactList({ contacts, onDelete }) {\r\n  return (\r\n    <ul className=\"contact-list\">\r\n      {contacts.map((contact) => (\r\n        <li key={contact.id}>\r\n          <p>Name: {contact.name}</p>\r\n          <p>Number: {contact.number}</p>\r\n          <button type=\"button\" onClick={() => onDelete(contact.id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: T.arrayOf(\r\n    T.shape({\r\n      id: T.string.isRequired,\r\n      name: T.string.isRequired,\r\n      number: T.string.isRequired,\r\n    })\r\n  ),\r\n  onDelete: T.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import T from \"prop-types\";\r\nimport \"../Container/Container.css\";\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: T.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import T from \"prop-types\";\r\nimport \"../Filter/Filter.css\";\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return <input type=\"text\" name=\"filter\" onChange={onChange} value={value} />;\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: T.string,\r\n  onChange: T.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Container from \"./components/Container/Container\";\nimport shortid from \"shortid\";\nimport Filter from \"./components/Filter/Filter\";\nimport contactFilter from \"./utils/filter\";\n\nfunction App() {\n  const [state, setState] = useState({\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  });\n\n  useEffect(() => {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      setState((prevState) => ({ ...prevState, contacts: parsedContacts }));\n    }\n  }, []);\n\n  const addContact = (contact) => {\n    const contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    const newContact = { id: shortid.generate(), ...contact };\n    if (contacts) {\n      localStorage.setItem(\n        \"contacts\",\n        JSON.stringify([...contacts, newContact])\n      );\n    } else {\n      localStorage.setItem(\n        \"contacts\",\n        JSON.stringify([...state.contacts, newContact])\n      );\n    }\n    setState((prevState) => ({\n      ...prevState,\n      contacts: [...prevState.contacts, newContact],\n    }));\n  };\n\n  const handleSubmiteForme = (contact) => {\n    state.contacts.some(({ name }) => name === contact.name)\n      ? alert(\"Contact alredy exists\")\n      : addContact(contact);\n  };\n\n  const removeContact = (id) => {\n    const newContacts = state.contacts.filter((contact) => contact.id !== id);\n    setState((prevState) => ({\n      ...prevState,\n      contacts: newContacts,\n    }));\n    localStorage.setItem(\"contacts\", JSON.stringify(newContacts));\n  };\n\n  const handleChangeFilter = ({ target: { name, value } }) => {\n    setState((prevState) => ({ ...prevState, [name]: value }));\n  };\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmite={handleSubmiteForme} />\n      <h2>Contacts</h2>\n      <Filter value={state.filter} onChange={handleChangeFilter} />\n      <ContactList\n        onDelete={removeContact}\n        contacts={contactFilter(state.contacts, state.filter)}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","export default function contactFilter(contacts, filter) {\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.trim().toLowerCase())\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}